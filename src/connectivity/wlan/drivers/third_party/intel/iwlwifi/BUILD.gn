# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/config/fuchsia/rules.gni")
import("//build/driver_package.gni")

bind_rules("iwlwifi_bind") {
  rules = "iwlwifi.bind"
  output = "iwlwifi-bind.h"
  tests = "bind_tests.json"
  deps = [ "//src/devices/bind/fuchsia.pci" ]
}

group("tests") {
  testonly = true
  deps = [ ":iwlwifi_bind_test" ]
}

config_flags = [
  "CPTCFG_IWL_TIMEOUT_FACTOR=1",
  "CPTCFG_IWLMVM=1",
]

# Contains the driver minus any PCIE specific code so that the simulation tests
# can easily provide a fake PCIE layer.
source_set("core") {
  visibility = [ "//src/connectivity/wlan/drivers/third_party/intel/iwlwifi/*" ]
  defines = config_flags

  sources = [
    "cfg/7000.c",
    "cpp-wrapper.cc",
    "device.cc",
    "device.h",
    "fuchsia_porting.c",
    "fuchsia_porting.h",
    "fw/init.c",
    "fw/notif-wait.c",
    "fw/paging.c",
    "fw/smem.c",
    "ieee80211.h",
    "inspect.cc",
    "iwl-config.h",
    "iwl-csr.h",
    "iwl-drv.c",
    "iwl-drv.h",
    "iwl-eeprom-parse.c",
    "iwl-fh.h",
    "iwl-io.c",
    "iwl-io.h",
    "iwl-nvm-parse.c",
    "iwl-phy-db.c",
    "iwl-prph.h",
    "iwl-trans.c",
    "iwl-trans.h",
    "mac-device.cc",
    "mvm/binding.c",
    "mvm/coex.c",
    "mvm/fw.c",
    "mvm/mac-ctxt.c",
    "mvm/mac80211.c",
    "mvm/nvm.c",
    "mvm/ops.c",
    "mvm/phy-ctxt.c",
    "mvm/power.c",
    "mvm/rx.c",
    "mvm/rxmq.c",
    "mvm/scan.c",
    "mvm/sta.c",
    "mvm/time-event.c",
    "mvm/tof.c",
    "mvm/tt.c",
    "mvm/tx.c",
    "mvm/utils.c",
    "wlan-device.c",
  ]

  deps = [
    "//garnet/lib/wlan/protocol:protocol",
    "//sdk/banjo/ddk.hw.wlan.wlaninfo",
    "//sdk/fidl/fuchsia.wlan.ieee80211",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/lib/driver",
    "//zircon/public/lib/async",
    "//zircon/public/lib/zircon-internal",
  ]

  public_deps = [
    "//sdk/banjo/fuchsia.hardware.wlanphyimpl",
    "//zircon/public/lib/sync",
    "//zircon/system/ulib/async-loop",
    "//zircon/system/ulib/backtrace-request",
  ]
}

# Contains the entire driver, separate from the driver_module for the unit
# tests.
source_set("pcie") {
  visibility = [ "//src/connectivity/wlan/drivers/third_party/intel/iwlwifi/*" ]
  defines = config_flags
  configs += [ "//build/config:all_source" ]

  sources = [
    "pcie/bind.cc",
    "pcie/drv.c",
    "pcie/internal.h",
    "pcie/pcie_device.cc",
    "pcie/pcie_device.h",
    "pcie/rx.c",
    "pcie/trans-gen2.c",
    "pcie/trans.c",
    "pcie/tx.c",
  ]

  deps = [
    ":core",
    ":iwlwifi_bind",
    "//garnet/lib/wlan/protocol",
    "//src/devices/lib/driver",
    "//zircon/public/lib/zircon-internal",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]

  public_deps = [
    "//sdk/banjo/fuchsia.hardware.pci",
    "//src/devices/pci/lib/device-protocol-pci",
    "//zircon/public/lib/sync",
  ]
}

driver_module("iwlwifi_driver") {
  output_name = "iwlwifi"

  deps = [ ":pcie" ]
}

all_fw_files = [ "iwlwifi-7265D-29.ucode" ]

foreach(fw_file, all_fw_files) {
  copy("iwlwifi-firmware-copy-" + fw_file) {
    sources =
        [ "//prebuilt/connectivity/wlan/firmware/intel/iwlwifi/" + fw_file ]
    outputs = [ "$root_out_dir/firmware/iwlwifi/" + fw_file ]
  }
}

driver_package("iwlwifi") {
  deps = [ ":iwlwifi_driver" ]

  drivers = [
    {
      name = "iwlwifi.so"
    },
  ]

  libraries = []

  foreach(fw_file, all_fw_files) {
    deps += [
      # The copy step has to be in the shared-library toolchain to use the
      # expected output directory, since we treat firmware blobs as if they
      # were libraries which always use the shared-library toolchain to build.
      ":iwlwifi-firmware-copy-" + fw_file + "($shlib_toolchain)",
    ]

    libraries += [
      {
        name = "firmware/iwlwifi/" + fw_file
      },
    ]
  }
}
